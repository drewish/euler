#import <Foundation/Foundation.h>

/*
 Problem 1
 
 If we list all the natural numbers below 10 that are multiples of 3 or 5,
 we get 3, 5, 6 and 9. The sum of these multiples is 23.
 
 Find the sum of all the multiples of 3 or 5 below 1000.
 */
void euler_p1() {
    NSUInteger    limit = 1000,
                ofThree = 3,
                ofFive = 5,
                sum = 0;
    NSMutableSet *set = [[NSMutableSet alloc] initWithCapacity:limit / 3];
    
    // Find matching numbers and put them into a set so we don't get duplicates.
    while (ofThree < limit || ofFive < limit) {
        if (ofThree < limit) 
            [set addObject: [NSNumber numberWithUnsignedInteger: ofThree]];
        if (ofFive < limit)
            [set addObject: [NSNumber numberWithUnsignedInteger: ofFive]];
        ofThree += 3;
        ofFive += 5;
    }
    // NSLog(@"%@", set);
    
    // Sum the numbers.
    for (NSNumber *n in set) {
        sum += [n intValue];
    }

    NSLog(@"%d", sum);
    
    [set release];
}

/* 
 Problem 2

 Each new term in the Fibonacci sequence is generated by adding the previous 
 two terms. By starting with 1 and 2, the first 10 terms will be:
   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 Find the sum of all the even-valued terms in the sequence which do not 
 exceed four million.
*/
void euler_p2() {}

/*
 Problem 19
 
 You are given the following information, but you may prefer to do some 
 research for yourself.

 * 1 Jan 1900 was a Monday.
 * Thirty days has September,
   April, June and November.
   All the rest have thirty-one,
   Saving February alone,
   Which has twenty-eight, rain or shine.
   And on leap years, twenty-nine.
 * A leap year occurs on any year evenly divisible by 4, but not on a century 
   unless it is divisible by 400.
 
 How many Sundays fell on the first of the month during the twentieth century 
 (1 Jan 1901 to 31 Dec 2000)?
 */
void euler_p19() {
    // We'll use this as an excuse to get acquainted with the calendar classes.
    NSUInteger sundays = 0;
    NSCalendar *gregorian = [[NSCalendar alloc] 
                             initWithCalendarIdentifier: NSGregorianCalendar];
    NSDateComponents *components = [[NSDateComponents alloc] init];
    [components setDay: 1];
    
    // Iterate over each year and month...
    for (NSInteger year = 1901; year <= 2000; year++) {
        for (NSInteger month = 1; month <= 12; month++) {
            // ...and build an NSDate for each...
            [components setMonth: month];
            [components setYear: year];
            NSDate *date = [gregorian dateFromComponents:components];
            // ...then check if it's a Sunday.
            NSInteger weekday = [[gregorian components: NSWeekdayCalendarUnit fromDate: date] weekday];
            if (weekday == 1) {
                NSLog(@"%@ matches", date, weekday);
                sundays++;
            }
        }

    }    
    
    [gregorian release];
    [components release];
    
    NSLog(@"Sundays: %d", sundays);
}
    

/*
 Problem 22

 Using names.txt ( http://projecteuler.net/project/names.txt ), a 46K text file 
 containing over five-thousand first names, begin by sorting it into 
 alphabetical order. Then working out the alphabetical value for each name, 
 multiply this value by its alphabetical position in the list to obtain a name 
 score.
 
 For example, when the list is sorted into alphabetical order, COLIN, which is 
 worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN 
 would obtain a score of 938 * 53 = 49714.
 
 What is the total of all the name scores in the file?
*/
void euler_p22() {
    // Load the contents of the file.
    NSURL *url = [NSURL URLWithString:@"http://projecteuler.net/project/names.txt"];
    NSError *error;
    NSString *contents = [NSString stringWithContentsOfURL: url encoding: NSASCIIStringEncoding error: &error];
    if (contents == nil) {
        NSLog(@"Error reading file at %@\n%@", url, [error localizedFailureReason]);
        return;
    }
    
    // Convert the string into a sorted array of names.
    NSCharacterSet *ends = [NSCharacterSet characterSetWithCharactersInString: @"\""];
    NSArray *names = [[contents stringByTrimmingCharactersInSet: ends] componentsSeparatedByString: @"\",\""];
    names = [names sortedArrayUsingSelector:@selector(compare:)];
    
    // Iterate over each name...
    NSUInteger  lineNumber = 1,
                sum = 0;
    for (NSString *name in names) {
        // ...computing the score for each name based on the sum of each 
        // character the name's position and the array.
        NSUInteger    score = 0,
                    len = [name length];
        for (NSUInteger i = 0; i < len; i++) {
            score += [name characterAtIndex: i] - '@';
        }
        sum += score * lineNumber;
        lineNumber++;
    }
    NSLog(@"Total: %d\n", sum);
}

int main (int argc, const char * argv[]) {
    NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];
    
    euler_p22();
    
    [pool drain];
    return 0;
}

